/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ionutbalosin.training.ecommerce.message.schema.order;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ProductEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6526231459713963936L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ProductEvent\",\"namespace\":\"ionutbalosin.training.ecommerce.message.schema.order\",\"fields\":[{\"name\":\"productId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"brand\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"price\",\"type\":\"float\"},{\"name\":\"currency\",\"type\":{\"type\":\"enum\",\"name\":\"OrderCurrency\",\"symbols\":[\"EUR\"]}},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"discount\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
  }

  private static final BinaryMessageEncoder<ProductEvent> ENCODER =
      new BinaryMessageEncoder<ProductEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ProductEvent> DECODER =
      new BinaryMessageDecoder<ProductEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ProductEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ProductEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ProductEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ProductEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ProductEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ProductEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ProductEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ProductEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID productId;
  private java.lang.String name;
  private java.lang.String brand;
  private float price;
  private ionutbalosin.training.ecommerce.message.schema.order.OrderCurrency currency;
  private int quantity;
  private float discount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ProductEvent() {}

  /**
   * All-args constructor.
   * @param productId The new value for productId
   * @param name The new value for name
   * @param brand The new value for brand
   * @param price The new value for price
   * @param currency The new value for currency
   * @param quantity The new value for quantity
   * @param discount The new value for discount
   */
  public ProductEvent(java.util.UUID productId, java.lang.String name, java.lang.String brand, java.lang.Float price, ionutbalosin.training.ecommerce.message.schema.order.OrderCurrency currency, java.lang.Integer quantity, java.lang.Float discount) {
    this.productId = productId;
    this.name = name;
    this.brand = brand;
    this.price = price;
    this.currency = currency;
    this.quantity = quantity;
    this.discount = discount;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return productId;
    case 1: return name;
    case 2: return brand;
    case 3: return price;
    case 4: return currency;
    case 5: return quantity;
    case 6: return discount;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: productId = (java.util.UUID)value$; break;
    case 1: name = value$ != null ? value$.toString() : null; break;
    case 2: brand = value$ != null ? value$.toString() : null; break;
    case 3: price = (java.lang.Float)value$; break;
    case 4: currency = (ionutbalosin.training.ecommerce.message.schema.order.OrderCurrency)value$; break;
    case 5: quantity = (java.lang.Integer)value$; break;
    case 6: discount = (java.lang.Float)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'productId' field.
   * @return The value of the 'productId' field.
   */
  public java.util.UUID getProductId() {
    return productId;
  }


  /**
   * Sets the value of the 'productId' field.
   * @param value the value to set.
   */
  public void setProductId(java.util.UUID value) {
    this.productId = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'brand' field.
   * @return The value of the 'brand' field.
   */
  public java.lang.String getBrand() {
    return brand;
  }


  /**
   * Sets the value of the 'brand' field.
   * @param value the value to set.
   */
  public void setBrand(java.lang.String value) {
    this.brand = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public float getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(float value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return The value of the 'currency' field.
   */
  public ionutbalosin.training.ecommerce.message.schema.order.OrderCurrency getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * @param value the value to set.
   */
  public void setCurrency(ionutbalosin.training.ecommerce.message.schema.order.OrderCurrency value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public int getQuantity() {
    return quantity;
  }


  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(int value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'discount' field.
   * @return The value of the 'discount' field.
   */
  public float getDiscount() {
    return discount;
  }


  /**
   * Sets the value of the 'discount' field.
   * @param value the value to set.
   */
  public void setDiscount(float value) {
    this.discount = value;
  }

  /**
   * Creates a new ProductEvent RecordBuilder.
   * @return A new ProductEvent RecordBuilder
   */
  public static ionutbalosin.training.ecommerce.message.schema.order.ProductEvent.Builder newBuilder() {
    return new ionutbalosin.training.ecommerce.message.schema.order.ProductEvent.Builder();
  }

  /**
   * Creates a new ProductEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ProductEvent RecordBuilder
   */
  public static ionutbalosin.training.ecommerce.message.schema.order.ProductEvent.Builder newBuilder(ionutbalosin.training.ecommerce.message.schema.order.ProductEvent.Builder other) {
    if (other == null) {
      return new ionutbalosin.training.ecommerce.message.schema.order.ProductEvent.Builder();
    } else {
      return new ionutbalosin.training.ecommerce.message.schema.order.ProductEvent.Builder(other);
    }
  }

  /**
   * Creates a new ProductEvent RecordBuilder by copying an existing ProductEvent instance.
   * @param other The existing instance to copy.
   * @return A new ProductEvent RecordBuilder
   */
  public static ionutbalosin.training.ecommerce.message.schema.order.ProductEvent.Builder newBuilder(ionutbalosin.training.ecommerce.message.schema.order.ProductEvent other) {
    if (other == null) {
      return new ionutbalosin.training.ecommerce.message.schema.order.ProductEvent.Builder();
    } else {
      return new ionutbalosin.training.ecommerce.message.schema.order.ProductEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for ProductEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ProductEvent>
    implements org.apache.avro.data.RecordBuilder<ProductEvent> {

    private java.util.UUID productId;
    private java.lang.String name;
    private java.lang.String brand;
    private float price;
    private ionutbalosin.training.ecommerce.message.schema.order.OrderCurrency currency;
    private int quantity;
    private float discount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ionutbalosin.training.ecommerce.message.schema.order.ProductEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.productId)) {
        this.productId = data().deepCopy(fields()[0].schema(), other.productId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.brand)) {
        this.brand = data().deepCopy(fields()[2].schema(), other.brand);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.currency)) {
        this.currency = data().deepCopy(fields()[4].schema(), other.currency);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.quantity)) {
        this.quantity = data().deepCopy(fields()[5].schema(), other.quantity);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.discount)) {
        this.discount = data().deepCopy(fields()[6].schema(), other.discount);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing ProductEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(ionutbalosin.training.ecommerce.message.schema.order.ProductEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.productId)) {
        this.productId = data().deepCopy(fields()[0].schema(), other.productId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.brand)) {
        this.brand = data().deepCopy(fields()[2].schema(), other.brand);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.currency)) {
        this.currency = data().deepCopy(fields()[4].schema(), other.currency);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.quantity)) {
        this.quantity = data().deepCopy(fields()[5].schema(), other.quantity);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.discount)) {
        this.discount = data().deepCopy(fields()[6].schema(), other.discount);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'productId' field.
      * @return The value.
      */
    public java.util.UUID getProductId() {
      return productId;
    }


    /**
      * Sets the value of the 'productId' field.
      * @param value The value of 'productId'.
      * @return This builder.
      */
    public ionutbalosin.training.ecommerce.message.schema.order.ProductEvent.Builder setProductId(java.util.UUID value) {
      validate(fields()[0], value);
      this.productId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'productId' field has been set.
      * @return True if the 'productId' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'productId' field.
      * @return This builder.
      */
    public ionutbalosin.training.ecommerce.message.schema.order.ProductEvent.Builder clearProductId() {
      productId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public ionutbalosin.training.ecommerce.message.schema.order.ProductEvent.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public ionutbalosin.training.ecommerce.message.schema.order.ProductEvent.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'brand' field.
      * @return The value.
      */
    public java.lang.String getBrand() {
      return brand;
    }


    /**
      * Sets the value of the 'brand' field.
      * @param value The value of 'brand'.
      * @return This builder.
      */
    public ionutbalosin.training.ecommerce.message.schema.order.ProductEvent.Builder setBrand(java.lang.String value) {
      validate(fields()[2], value);
      this.brand = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'brand' field has been set.
      * @return True if the 'brand' field has been set, false otherwise.
      */
    public boolean hasBrand() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'brand' field.
      * @return This builder.
      */
    public ionutbalosin.training.ecommerce.message.schema.order.ProductEvent.Builder clearBrand() {
      brand = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public float getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public ionutbalosin.training.ecommerce.message.schema.order.ProductEvent.Builder setPrice(float value) {
      validate(fields()[3], value);
      this.price = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public ionutbalosin.training.ecommerce.message.schema.order.ProductEvent.Builder clearPrice() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * @return The value.
      */
    public ionutbalosin.training.ecommerce.message.schema.order.OrderCurrency getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public ionutbalosin.training.ecommerce.message.schema.order.ProductEvent.Builder setCurrency(ionutbalosin.training.ecommerce.message.schema.order.OrderCurrency value) {
      validate(fields()[4], value);
      this.currency = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'currency' field.
      * @return This builder.
      */
    public ionutbalosin.training.ecommerce.message.schema.order.ProductEvent.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public int getQuantity() {
      return quantity;
    }


    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public ionutbalosin.training.ecommerce.message.schema.order.ProductEvent.Builder setQuantity(int value) {
      validate(fields()[5], value);
      this.quantity = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public ionutbalosin.training.ecommerce.message.schema.order.ProductEvent.Builder clearQuantity() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'discount' field.
      * @return The value.
      */
    public float getDiscount() {
      return discount;
    }


    /**
      * Sets the value of the 'discount' field.
      * @param value The value of 'discount'.
      * @return This builder.
      */
    public ionutbalosin.training.ecommerce.message.schema.order.ProductEvent.Builder setDiscount(float value) {
      validate(fields()[6], value);
      this.discount = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'discount' field has been set.
      * @return True if the 'discount' field has been set, false otherwise.
      */
    public boolean hasDiscount() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'discount' field.
      * @return This builder.
      */
    public ionutbalosin.training.ecommerce.message.schema.order.ProductEvent.Builder clearDiscount() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ProductEvent build() {
      try {
        ProductEvent record = new ProductEvent();
        record.productId = fieldSetFlags()[0] ? this.productId : (java.util.UUID) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        record.brand = fieldSetFlags()[2] ? this.brand : (java.lang.String) defaultValue(fields()[2]);
        record.price = fieldSetFlags()[3] ? this.price : (java.lang.Float) defaultValue(fields()[3]);
        record.currency = fieldSetFlags()[4] ? this.currency : (ionutbalosin.training.ecommerce.message.schema.order.OrderCurrency) defaultValue(fields()[4]);
        record.quantity = fieldSetFlags()[5] ? this.quantity : (java.lang.Integer) defaultValue(fields()[5]);
        record.discount = fieldSetFlags()[6] ? this.discount : (java.lang.Float) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ProductEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<ProductEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ProductEvent>
    READER$ = (org.apache.avro.io.DatumReader<ProductEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










